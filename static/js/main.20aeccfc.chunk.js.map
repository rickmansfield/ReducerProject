{"version":3,"sources":["actions/index.js","reducers/index.js","components/TotalDisplay.js","components/CalcButton.js","App.js","reportWebVitals.js","index.js"],"names":["ADD_ONE","APPLY_NUMBER","CHANGE_OPERATION","CLEAR_DISPLAY","ADD_MEMORY","IMPOSE_MEMORY","CLEAR_MEMORY","initialState","total","operation","memory","calculateResult","num1","num2","reducer","state","action","type","payload","TotalDisplay","props","value","className","readOnly","rows","id","name","CalcButton","onClick","size","App","useReducer","dispatch","console","log","handleNumberClick","number","applyNumber","handleOperationClick","operator","changeOperation","handleAddMemroy","handleIposeMemory","handleClearMemory","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20aeccfc.chunk.js","sourcesContent":["//ACTION CREATORS\nexport const ADD_ONE = \"ADD_ONE\";\nexport const APPLY_NUMBER = \"APPLY_NUMBER\";\nexport const CHANGE_OPERATION = \"CHANGE_OPERATION\";\nexport const CLEAR_DISPLAY = \"CLEAR_DISPLAY\";\nexport const ADD_MEMORY = \"ADD_MEMORY\";\nexport const IMPOSE_MEMORY = \"IMPOSE_MEMORY\";\nexport const CLEAR_MEMORY = \"CLEAR_MEMORY\";\n\nexport const addOne = () => {\n    return({type:ADD_ONE});\n}\n\nexport const applyNumber = (number) => {\n    return({type:APPLY_NUMBER, payload:number});\n}\n\nexport const changeOperation = (operator) => {\n    return ({type:CHANGE_OPERATION, payload:operator});\n}\n\nexport const clearDisplay = () => {\n    return ({type: CLEAR_DISPLAY});\n}\n\nexport const addMemory = () => {\n    return ({type: ADD_MEMORY});\n}\n\nexport const imposeMemory = () => {\n    return ({type: IMPOSE_MEMORY});\n}\n\nexport const clearMemory = () => {\n    return ({type: CLEAR_MEMORY})\n}","//ACTION CASES\nimport {\n    ADD_MEMORY,\n    ADD_ONE,\n    APPLY_NUMBER,\n    CHANGE_OPERATION,\n    CLEAR_DISPLAY,\n    IMPOSE_MEMORY,\n    CLEAR_MEMORY\n} from './../actions';\n\nexport const initialState = {\n    total: 0,\n    operation: \"*\",\n    memory: 0\n}\n\nconst calculateResult = (num1, num2, operation) => {\n    // eslint-disable-next-line default-case\n    switch (operation) {\n        case (\"+\"):\n            return num1 + num2;\n        case (\"*\"):\n            return num1 * num2;\n        case (\"-\"):\n            return num1 - num2;\n    }\n}\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case (ADD_ONE):\n            return ({\n                ...state,\n                total: state.total + 1\n            });\n\n        case (APPLY_NUMBER):\n            return ({\n                ...state,\n                total: calculateResult(state.total, action.payload, state.operation)\n            });\n\n        case (CHANGE_OPERATION):\n            return ({\n                ...state,\n                operation: action.payload\n            });\n        case (CLEAR_DISPLAY):\n            return ({\n                ...state,\n                total: 0\n            });\n        case (ADD_MEMORY):\n            return ({\n                ...state,\n                memory: state.total\n            })\n        case (IMPOSE_MEMORY):\n            return ({\n                ...state,\n                total: calculateResult(state.total, state.memory, state.operation)\n            });\n        case (CLEAR_MEMORY):\n            return ({\n                ...state,\n                memory: 0\n            })\n\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","import React from 'react';\n\n\nconst TotalDisplay = (props) => {\n    const { value } = props;\n    \n    return(\n    <div className=\"row\">\n        <div className=\"col-md-12 p-0\"> \n            <div className=\"form-group\">\n                <textarea className=\"form-control\" readOnly value={value} rows=\"1\" id=\"total\" type=\"text\" name=\"ans\"></textarea>\n            </div>\n        </div>\n    </div>);\n}\n\nexport default TotalDisplay;","import React from 'react';\n\nconst CalcButton = (props) => {\n    const { value, onClick = ()=>{}, size = 4} = props;\n\n    return(<div className={`col-xs-${size}`}>\n        <button type=\"button\" onClick={onClick} className=\"btn\">{value}</button>\n    </div>);\n}\n\nexport default CalcButton;","import React, { useReducer } from 'react';\nimport reducer, { initialState } from './reducers';\n\nimport './App.css';\n\nimport TotalDisplay from './components/TotalDisplay';\nimport CalcButton from './components/CalcButton';\nimport {\n  addMemory,\n  applyNumber,\n  changeOperation,\n  clearDisplay,\n  imposeMemory,\n  clearMemory\n} from '../src/actions/index';\n\nfunction App() {\n // console.log('App.js 10 access to initialState',initialState);\n  const [state, dispatch] = useReducer(reducer, initialState);\n  console.log('App.js 12 current state via dispatch useReducer', state);\n\n  // const handleAddOneClick = e => {\n  //   dispatch(addOne());\n  // }\n\n  const handleNumberClick = (number) => {\n    dispatch(applyNumber(number));\n  }\n\n  const handleOperationClick = (operator) => {\n    // console.log('Handle operation click');\n    dispatch(changeOperation(operator));\n  }\n\n  const handleClearClick = () => {\n    dispatch(clearDisplay());\n  }\n\n  const handleAddMemroy = () => {\n    dispatch(addMemory())\n  }\n\n  const handleIposeMemory = () => {\n    console.log('Impose Memory');\n    dispatch(imposeMemory());\n  }\n\n  const handleClearMemory = () => {\n    console.log('Clear Memory here');\n    dispatch(clearMemory());\n  }\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar navbar-dark bg-dark\">\n        {/* <a className=\"navbar-brand\" href=\"#\"><img width=\"40px\" src=\"./Lambda-Logo-Red.png\" alt=''/> Lambda Reducer Challenge</a> */}\n      </nav>\n\n      <div className=\"container row mt-5\">\n        <div className=\"col-md-12 d-flex justify-content-center\">\n          <form name=\"Cal\">\n\n            <TotalDisplay value={state.total} />\n            <div className=\"row details\">\n              <span id=\"operation\"><b>Operation:</b> {state.operation}</span>\n              <span id=\"memory\"><b>Memory:</b> {state.memory}</span>\n            </div>\n\n            <div className=\"row\">\n              <CalcButton value={\"M+\"} onClick={() => { handleAddMemroy() }} />\n              <CalcButton value={\"MR\"} onClick={() => { handleIposeMemory() }} />\n              <CalcButton value={\"MC\"} onClick={() => { handleClearMemory() }} />\n            </div>\n\n            <div className=\"row\">\n              {/* <CalcButton value={1} onClick={handleAddOneClick}/> */}\n              <CalcButton value={1} onClick={() => { handleNumberClick(1) }} />\n              <CalcButton value={2} onClick={() => { handleNumberClick(2) }} />\n              <CalcButton value={3} onClick={() => { handleNumberClick(3) }} />\n            </div>\n\n            <div className=\"row\">\n              <CalcButton value={4} onClick={() => { handleNumberClick(4) }} />\n              <CalcButton value={5} onClick={() => { handleNumberClick(5) }} />\n              <CalcButton value={6} onClick={() => { handleNumberClick(6) }} />\n            </div>\n\n            <div className=\"row\">\n              <CalcButton value={7} onClick={() => { handleNumberClick(7) }} />\n              <CalcButton value={8} onClick={() => { handleNumberClick(8) }} />\n              <CalcButton value={9} onClick={() => { handleNumberClick(9) }} />\n            </div>\n\n            <div className=\"row\">\n              <CalcButton value={\"+\"} onClick={() => { handleOperationClick(\"+\") }} />\n              <CalcButton value={\"*\"} onClick={() => { handleOperationClick(\"*\") }} />\n              <CalcButton value={\"-\"} onClick={() => { handleOperationClick(\"-\") }} />\n            </div>\n\n            <div className=\"row ce_button\">\n              <CalcButton value={\"CE\"} onClick={handleClearClick} />\n            </div>\n\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}